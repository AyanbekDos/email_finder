import asyncio
import os
import logging
from datetime import datetime, timedelta
from typing import Dict
import aiofiles
import aiohttp
from telegram import Update, Document, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler
)

from config import config
from email_scraper import EmailScraper
from excel_handler import ExcelHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EmailScraperBot:
    def __init__(self):
        self.scraper = EmailScraper()
        self.excel_handler = ExcelHandler()
        self.active_tasks: Dict[int, asyncio.Task] = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        user_name = update.effective_user.first_name
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ email-–∞–¥—Ä–µ—Å–æ–≤ —Å —Å–∞–π—Ç–æ–≤. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
        )
        
        keyboard = [
            ["üöÄ –ù–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥"],
            ["üìà –ú–æ–π —Å—Ç–∞—Ç—É—Å", "‚ùì –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def show_scraping_instructions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∞–ø–∏–Ω–≥–∞."""
        instructions_text = """
üöÄ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥:**

**–°–ø–æ—Å–æ–± 1: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª**
–°–æ–∑–¥–∞–π—Ç–µ `.txt` —Ñ–∞–π–ª, –≥–¥–µ –∫–∞–∂–¥—ã–π URL –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.

**–°–ø–æ—Å–æ–± 2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –≤ —á–∞—Ç.

**–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–π–º—É:**
‚úÖ `example.com`
‚úÖ `www.example.com`
‚úÖ `https://example.com`

---
**–ß—Ç–æ –¥–∞–ª—å—à–µ?**
–Ø –Ω–∞—á–Ω—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –í –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ `Excel` —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
üìÅ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size} –ú–ë
‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–∞–π—Ç: {timeout} –º–∏–Ω.
üîÑ –ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –¥–æ–º–µ–Ω: {max_pages}
        """.format(
            max_size=config.MAX_FILE_SIZE_MB,
            timeout=config.SITE_TIMEOUT_MINUTES,
            max_pages=config.MAX_PAGES_PER_DOMAIN
        )
        await update.message.reply_text(instructions_text, parse_mode='Markdown')

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        document: Document = update.message.document
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if document.file_size > config.MAX_FILE_SIZE_MB * 1024 * 1024:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE_MB} –ú–ë"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if not document.file_name.endswith('.txt'):
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if user_id in self.active_tasks and not self.active_tasks[user_id].done():
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É", callback_data=f"cancel_{user_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –û—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            status_message = await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
            
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_{user_id}_{document.file_name}"
            
            await file.download_to_drive(file_path)
            
            # –ß—Ç–µ–Ω–∏–µ URL –∏–∑ —Ñ–∞–π–ª–∞
            await status_message.edit_text("üìñ –ß–∏—Ç–∞—é URL –∏–∑ —Ñ–∞–π–ª–∞...")
            
            async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                content = await f.read()
                urls = [line.strip() for line in content.split('\n') if line.strip()]
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
            
            if not urls:
                await status_message.edit_text("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL!")
                return
            
            await status_message.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(urls)} URL. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            task = asyncio.create_task(
                self._process_urls(urls, user_id, update, context, status_message)
            )
            self.active_tasks[user_id] = task
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞!")

    async def _process_urls(self, urls, user_id, update, context, status_message):
        """–ü—Ä–æ—Ü–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º."""
        excel_filename = ""
        try:
            # --- –§–∞–∑–∞ 1: –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
            await status_message.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(urls)} URL. –§–∞–∑–∞ 1: –ù–∞—á–∏–Ω–∞—é –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            last_progress_text = "" # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API

            async def progress_callback(progress, completed, total):
                nonlocal last_progress_text
                try:
                    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    progress_bar = "‚ñà" * (progress // 5) + "‚ñë" * (20 - progress // 5)
                    text = f"üîç –§–∞–∑–∞ 1: {progress}%\n[{progress_bar}]\n\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed}/{total} —Å–∞–π—Ç–æ–≤"
                    
                    # --- –£–ú–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if text != last_progress_text:
                        await status_message.edit_text(text, reply_markup=reply_markup)
                        last_progress_text = text

                except BadRequest as e:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≤–∏–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified", –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –∂–µ –ø—Ä–æ—Å–∫–æ—á–∏—Ç
                    if "Message is not modified" in str(e):
                        pass
                    else:
                        logger.warning(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                except Exception as e:
                    logger.warning(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            results = await self.scraper.scrape_emails_from_urls(urls, progress_callback)
            
            if user_id in self.active_tasks and self.active_tasks[user_id].cancelled():
                return

            # --- –§–∞–∑–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
            await status_message.edit_text("üïµÔ∏è –§–∞–∑–∞ 2: –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            retry_urls = []
            banned_links = {}

            urls_to_verify = {url: data['contact_page'] for url, data in results.items() if not data.get('emails') and data.get('contact_page')}
            
            if urls_to_verify:
                async with aiohttp.ClientSession() as session:
                    for url, contact_page in urls_to_verify.items():
                        try:
                            async with session.head(contact_page, timeout=10) as response:
                                if response.status == 404:
                                    logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {contact_page} –¥–ª—è {url} –≤–µ—Ä–Ω—É–ª–∞ 404. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É.")
                                    retry_urls.append(url)
                                    banned_links.setdefault(url, set()).add(contact_page)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {contact_page}: {e}")
            
            if retry_urls:
                await status_message.edit_text(f"üöÄ –§–∞–∑–∞ 2: –ù–∞–π–¥–µ–Ω–æ {len(retry_urls)} —Å–∞–π—Ç–æ–≤ —Å –±–∏—Ç—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                retry_results = await self.scraper.scrape_emails_from_urls(retry_urls, banned_links=banned_links)
                results.update(retry_results)

            # --- –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---
            await status_message.edit_text("üìä –°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π Excel —Ñ–∞–π–ª...")
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_filename = f"email_results_{user_id}_{timestamp}.xlsx"
            
            try:
                self.excel_handler.create_excel_file(results, excel_filename)
                
                total_emails = sum(len(data.get('emails', [])) for data in results.values())
                sites_with_emails = sum(1 for data in results.values() if data.get('emails'))
                
                stats_text = f"""
‚úÖ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∞–π—Ç–æ–≤: {len(urls)}
‚Ä¢ –°–∞–π—Ç–æ–≤ —Å email: {sites_with_emails}
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ email: {total_emails}
‚Ä¢ –°–∞–π—Ç–æ–≤ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(retry_urls)}

üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–∞–π–ª–µ:
                """
                
                await status_message.edit_text(stats_text, parse_mode='Markdown')
                
                with open(excel_filename, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        filename=f"email_results_{timestamp}.xlsx",
                        caption="üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤"
                    )
            finally:
                if excel_filename and os.path.exists(excel_filename):
                    os.remove(excel_filename)
                    logger.info(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ {excel_filename} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

        except asyncio.CancelledError:
            await status_message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            if excel_filename and os.path.exists(excel_filename):
                os.remove(excel_filename)
                logger.info(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ {excel_filename} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!")
        finally:
            if user_id in self.active_tasks:
                del self.active_tasks[user_id]

    async def cancel_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = int(query.data.split('_')[1])
        
        if user_id in self.active_tasks and not self.active_tasks[user_id].done():
            self.active_tasks[user_id].cancel()
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    async def _cleanup_file(self, filename: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(config.CLEANUP_HOURS * 3600)
        try:
            if os.path.exists(filename):
                os.remove(filename)
                logger.info(f"–§–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üîç **Email Scraper Bot - –ü–æ–º–æ—â—å**

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ .txt —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL (–æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É)
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
4. –ü–æ–ª—É—á–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL:**
‚Ä¢ https://example.com
‚Ä¢ http://example.com
‚Ä¢ example.com (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è http://)

**–ì–¥–µ –∏—â–µ–º email:**
‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size} –ú–ë
‚Ä¢ –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–∞–π—Ç: {timeout} –º–∏–Ω—É—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –¥–æ–º–µ–Ω: {max_pages}
        """.format(
            max_size=config.MAX_FILE_SIZE_MB,
            timeout=config.SITE_TIMEOUT_MINUTES,
            max_pages=config.MAX_PAGES_PER_DOMAIN
        )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        if user_id in self.active_tasks and not self.active_tasks[user_id].done():
            await update.message.reply_text("üîÑ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

    async def handle_text_urls(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        potential_urls = []
        lines = text.split('\n')
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#') and not line.startswith('//'):
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É
                if ('.' in line and ' ' not in line and len(line) > 3 and 
                    not line.startswith('/') and not line.startswith('@')):
                    potential_urls.append(line)
        
        if not potential_urls:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "üí° **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                "**–í–∞—Ä–∏–∞–Ω—Ç 1:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL\n"
                "**–í–∞—Ä–∏–∞–Ω—Ç 2:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
                "```\n"
                "biohaus.it\n"
                "fassabortolo.com\n"
                "casalgrandepadana.it\n"
                "```\n\n"
                "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
                "‚Ä¢ `example.com`\n"
                "‚Ä¢ `www.example.com`\n"
                "‚Ä¢ `https://example.com`\n"
                "‚Ä¢ `http://example.com`",
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if user_id in self.active_tasks and not self.active_tasks[user_id].done():
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É", callback_data=f"cancel_{user_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –û—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return
        
        try:
            status_message = await update.message.reply_text(
                f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(potential_urls)} URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n" +
                "\n".join(f"‚Ä¢ `{url}`" for url in potential_urls[:5]) +
                (f"\n‚Ä¢ ... –∏ –µ—â–µ {len(potential_urls) - 5}" if len(potential_urls) > 5 else "") +
                "\n\nüîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                parse_mode='Markdown'
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            task = asyncio.create_task(
                self._process_urls(potential_urls, user_id, update, context, status_message)
            )
            self.active_tasks[user_id] = task
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö URL: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL!")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not config.BOT_TOKEN or config.BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ config.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = EmailScraperBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("status", bot.status_command))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    application.add_handler(MessageHandler(filters.Regex('^üöÄ –ù–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥$'), bot.show_scraping_instructions))
    application.add_handler(MessageHandler(filters.Regex('^üìà –ú–æ–π —Å—Ç–∞—Ç—É—Å$'), bot.status_command))
    application.add_handler(MessageHandler(filters.Regex('^‚ùì –ü–æ–º–æ—â—å$'), bot.help_command))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
    application.add_handler(MessageHandler(filters.Document.ALL, bot.handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^üöÄ –ù–∞—á–∞—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥$') & ~filters.Regex('^üìà –ú–æ–π —Å—Ç–∞—Ç—É—Å$') & ~filters.Regex('^‚ùì –ü–æ–º–æ—â—å$'), bot.handle_text_urls))
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ ---
    application.add_handler(CallbackQueryHandler(bot.cancel_task, pattern=r"cancel_\d+"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 