import os
import difflib
from pathlib import Path
from datetime import datetime
import glob
import sys
import json

def get_next_version_number(snapshots_dir):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏"""
    if not snapshots_dir.exists():
        return 1
    
    existing_files = list(snapshots_dir.glob("v*.txt"))
    if not existing_files:
        return 1
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–π
    version_numbers = []
    for file in existing_files:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ v001.txt -> 1
            version_str = file.stem[1:]  # —É–±–∏—Ä–∞–µ–º 'v'
            version_numbers.append(int(version_str))
        except ValueError:
            continue
    
    return max(version_numbers) + 1 if version_numbers else 1

def analyze_differences(old_content, new_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—Å–∏—è–º–∏ –±–µ–∑ –ò–ò"""
    if not old_content:
        return {
            "summary": "–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
            "files_added": 0,
            "files_removed": 0,
            "files_modified": 0,
            "total_lines_added": 0,
            "total_lines_removed": 0,
            "details": []
        }
    
    old_lines = old_content.split('\n')
    new_lines = new_content.split('\n')
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    diff = list(difflib.unified_diff(old_lines, new_lines, lineterm=''))
    
    lines_added = sum(1 for line in diff if line.startswith('+') and not line.startswith('+++'))
    lines_removed = sum(1 for line in diff if line.startswith('-') and not line.startswith('---'))
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ (–∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º)
    old_files = extract_file_list(old_content)
    new_files = extract_file_list(new_content)
    
    files_added = len(new_files - old_files)
    files_removed = len(old_files - new_files)
    files_modified = len(old_files & new_files)  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    details = []
    
    if files_added > 0:
        added_files = list(new_files - old_files)[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        details.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(added_files)}")
    
    if files_removed > 0:
        removed_files = list(old_files - new_files)[:5]
        details.append(f"–£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(removed_files)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if lines_added > lines_removed * 2:
        change_type = "–ö—Ä—É–ø–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
    elif lines_removed > lines_added * 2:
        change_type = "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–¥–∞"
    elif lines_added > 50 or lines_removed > 50:
        change_type = "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    elif lines_added > 10 or lines_removed > 10:
        change_type = "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    else:
        change_type = "–ú–∏–Ω–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    
    return {
        "summary": change_type,
        "files_added": files_added,
        "files_removed": files_removed,
        "files_modified": files_modified,
        "total_lines_added": lines_added,
        "total_lines_removed": lines_removed,
        "details": details
    }

def extract_file_list(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    files = set()
    lines = content.split('\n')
    
    for line in lines:
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "# 1. –§–ê–ô–õ: path/to/file.py"
        if line.startswith('# ') and '–§–ê–ô–õ:' in line:
            try:
                file_path = line.split('–§–ê–ô–õ:')[1].strip()
                files.add(file_path)
            except IndexError:
                continue
    
    return files

def create_versioned_backup(root_dir, exclude_dirs=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', '.venv', 'venv', 'env', 
                       'node_modules', '.pytest_cache', '.mypy_cache', 'project_snapshots']
    
    root_path = Path(root_dir).resolve()
    snapshots_dir = root_path / "project_snapshots"
    snapshots_dir.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
    version_number = get_next_version_number(snapshots_dir)
    version_filename = f"v{version_number:03d}.txt"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã
    python_files = []
    for file_path in glob.glob(str(root_path / "**/*.py"), recursive=True):
        file_path = Path(file_path)
        if not any(excluded in str(file_path) for excluded in exclude_dirs):
            if '__pycache__' not in str(file_path):
                python_files.append(file_path)
    
    python_files.sort()
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    previous_content = ""
    if version_number > 1:
        previous_file = snapshots_dir / f"v{version_number-1:03d}.txt"
        if previous_file.exists():
            try:
                with open(previous_file, 'r', encoding='utf-8') as f:
                    previous_content = f.read()
            except Exception:
                pass
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–Ω–∏–º–æ–∫
    current_content = generate_project_content(root_path, python_files)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    diff_analysis = analyze_differences(previous_content, current_content)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º
    output_path = snapshots_dir / version_filename
    
    with open(output_path, 'w', encoding='utf-8') as outfile:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        outfile.write(f"# –°–ù–ò–ú–û–ö –ü–†–û–ï–ö–¢–ê - –í–ï–†–°–ò–Ø {version_number:03d}\n")
        outfile.write(f"# –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        outfile.write(f"# –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {root_path}\n")
        outfile.write(f"# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}\n")
        outfile.write("=" * 80 + "\n\n")
        
        # –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
        if version_number > 1:
            outfile.write("# –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –° –ü–†–ï–î–´–î–£–©–ï–ô –í–ï–†–°–ò–ò\n")
            outfile.write("=" * 50 + "\n")
            outfile.write(f"–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π: {diff_analysis['summary']}\n")
            outfile.write(f"–§–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {diff_analysis['files_added']}\n")
            outfile.write(f"–§–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {diff_analysis['files_removed']}\n")
            outfile.write(f"–§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {diff_analysis['files_modified']}\n")
            outfile.write(f"–°—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: +{diff_analysis['total_lines_added']}\n")
            outfile.write(f"–°—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ: -{diff_analysis['total_lines_removed']}\n")
            
            if diff_analysis['details']:
                outfile.write(f"\n–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n")
                for detail in diff_analysis['details']:
                    outfile.write(f"‚Ä¢ {detail}\n")
            
            outfile.write("\n" + "=" * 80 + "\n\n")
        
        # –û–ì–õ–ê–í–õ–ï–ù–ò–ï
        outfile.write("# –û–ì–õ–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í\n")
        outfile.write("=" * 40 + "\n")
        
        for i, file_path in enumerate(python_files, 1):
            relative_path = file_path.relative_to(root_path)
            outfile.write(f"{i:3d}. {relative_path}\n")
        
        outfile.write("\n" + "=" * 80 + "\n\n")
        
        # –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–û–í
        outfile.write(current_content)
        
        # –ú–ï–¢–ê–î–ê–ù–ù–´–ï
        outfile.write(f"\n{'#' * 80}\n")
        outfile.write(f"# –ú–ï–¢–ê–î–ê–ù–ù–´–ï –í–ï–†–°–ò–ò\n")
        outfile.write(f"{'#' * 80}\n")
        outfile.write(f"# –í–µ—Ä—Å–∏—è: {version_number:03d}\n")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–Ω–æ—Å–∏–º —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–∑ f-—Å—Ç—Ä–æ–∫–∏
        prev_version = f"{version_number-1:03d}" if version_number > 1 else "–Ω–µ—Ç"
        outfile.write(f"# –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è: {prev_version}\n")

        outfile.write(f"# –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        outfile.write(f"# –°–∏—Å—Ç–µ–º–∞: {sys.platform}\n")
        outfile.write(f"# –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(exclude_dirs)}\n")
    
    print(f"‚úÖ –°–Ω–∏–º–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω!")
    print(f"üìÅ –í–µ—Ä—Å–∏—è: v{version_number:03d}")
    print(f"üìÑ –§–∞–π–ª: {output_path}")
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    
    if version_number > 1:
        print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: {diff_analysis['summary']}")
        print(f"   +{diff_analysis['total_lines_added']} —Å—Ç—Ä–æ–∫, -{diff_analysis['total_lines_removed']} —Å—Ç—Ä–æ–∫")
    
    return output_path, version_number

def generate_project_content(root_path, python_files):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    content = ""
    
    for i, file_path in enumerate(python_files, 1):
        relative_path = file_path.relative_to(root_path)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
        content += f"\n{'#' * 80}\n"
        content += f"# {i:3d}. –§–ê–ô–õ: {relative_path}\n"
        content += f"# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_path}\n"
        content += f"# –†–∞–∑–º–µ—Ä: {file_path.stat().st_size} –±–∞–π—Ç\n"
        content += f"{'#' * 80}\n\n"
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'latin1']
            file_content = None
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as infile:
                        file_content = infile.read()
                        break
                except UnicodeDecodeError:
                    continue
            
            if file_content is None:
                content += f"# –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ\n\n"
                continue
            
            if not file_content.strip():
                content += "# –§–ê–ô–õ –ü–£–°–¢–û–ô\n\n"
            else:
                content += file_content
                if not file_content.endswith('\n'):
                    content += '\n'
                content += '\n'
                
        except Exception as e:
            content += f"# –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {str(e)}\n\n"
    
    return content

def rollback_to_version(root_dir, target_version):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)"""
    root_path = Path(root_dir).resolve()
    snapshots_dir = root_path / "project_snapshots"
    
    version_file = snapshots_dir / f"v{target_version:03d}.txt"
    
    if not version_file.exists():
        print(f"‚ùå –í–µ—Ä—Å–∏—è v{target_version:03d} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None
    
    print(f"üìñ –ü–æ–∫–∞–∑—ã–≤–∞—é –≤–µ—Ä—Å–∏—é v{target_version:03d}")
    print(f"üìÑ –§–∞–π–ª: {version_file}")
    
    return version_file

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    create_versioned_backup(".")
    
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    # rollback_to_version(".", 2)
